#!/bin/bash

# Load .env if present
if [ -f "$PWD/.env" ]; then
    set -a
    source "$PWD/.env"
    set +a
elif [ -f "$HOME/.cody_env" ]; then
    set -a
    source "$HOME/.cody_env"
    set +a
fi

# Cody - Self-Modifying AI Development Assistant
# Complete version with system prompt integration and all functions working
# Usage: ./cody

# Configuration
GEMMA_ENDPOINT="${GEMMA_ENDPOINT:-http://10.0.0.201:1234}"
OLLAMA_ENDPOINT="${OLLAMA_ENDPOINT:-http://127.0.0.1:11434}"
MODEL_NAME="${MODEL_NAME:-mistralai/codestral-22b-v0.1}"
MEMORY_FILE="${MEMORY_FILE:-$HOME/.cody_global_memory}"
HISTORY_FILE="${HISTORY_FILE:-$HOME/.cody_history}"
WORK_DIR="${WORK_DIR:-$(pwd)}"
SYSTEM_PROMPT=""
MAX_BACKUPS="${MAX_BACKUPS:-5}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
WHITE='\033[1;37m'
NC='\033[0m'

# Icons
ROBOT="🤖"
ROCKET_ICON="🚀"
GEAR="⚙️"
LIGHTNING="⚡"
TARGET="🎯"

# Load system prompt from file
load_system_prompt() {
    if [ -f "$WORK_DIR/cody_system.txt" ]; then
        SYSTEM_PROMPT=$(cat "$WORK_DIR/cody_system.txt")
        echo -e "${GREEN}✓ Loaded system prompt: cody_system.txt${NC}"
    elif [ -f "$HOME/.cody_system_prompt" ]; then
        SYSTEM_PROMPT=$(cat "$HOME/.cody_system_prompt")
        echo -e "${GREEN}✓ Loaded system prompt: ~/.cody_system_prompt${NC}"
    else
        SYSTEM_PROMPT="You are Cody, a self-modifying AI development assistant created by Mark Hubrich. You execute actions decisively instead of just suggesting them. When asked to do something, you DO it immediately. Be confident and action-oriented."
        echo -e "${YELLOW}⚠️ Using default system prompt${NC}"
    fi
}

# Manage backup files - keep only MAX_BACKUPS
manage_backups() {
    local backup_pattern="$0.backup.*"
    local backup_files=($(ls -t $backup_pattern 2>/dev/null))
    
    if [ ${#backup_files[@]} -gt $MAX_BACKUPS ]; then
        echo -e "${BLUE}Managing backups (keeping $MAX_BACKUPS most recent)${NC}"
        
        # Remove oldest backups
        for ((i=MAX_BACKUPS; i<${#backup_files[@]}; i++)); do
            echo -e "${GRAY}Removing old backup: ${backup_files[i]##*/}${NC}"
            rm -f "${backup_files[i]}"
        done
    fi
}

# Load saved model preference
load_model_preference() {
    if [ -f "$HOME/.cody_model" ]; then
        MODEL_NAME=$(cat "$HOME/.cody_model")
    fi
}

# Fetch available models
fetch_available_models() {
    AVAILABLE_MODELS=()
    local resp=$(curl -s "$GEMMA_ENDPOINT/v1/models" 2>/dev/null)
    if [ -n "$resp" ]; then
        mapfile -t AVAILABLE_MODELS < <(echo "$resp" | jq -r '..|.id? // empty' | sort -u)
    fi
}

# Detect Ollama
detect_ollama() {
    curl -s "$OLLAMA_ENDPOINT/v1/models" >/dev/null 2>&1
}

# Select endpoint
select_endpoint() {
    local endpoints=("$GEMMA_ENDPOINT")
    local names=("LM Studio ($GEMMA_ENDPOINT)")

    if detect_ollama; then
        endpoints+=("$OLLAMA_ENDPOINT")
        names+=("Ollama ($OLLAMA_ENDPOINT)")
    fi

    # Check if we're in non-interactive mode
    if [ ! -t 0 ]; then
        # Non-interactive mode: use default endpoint
        echo -e "${GREEN}✓ Using endpoint: $GEMMA_ENDPOINT${NC}"
        return
    fi

    if [ ${#endpoints[@]} -gt 1 ]; then
        echo -e "${BLUE}Available servers:${NC}"
        local i=1
        for name in "${names[@]}"; do
            echo -e "  ${YELLOW}${i}.${NC} $name"
            ((i++))
        done
        echo

        local choice
        read -e -p "$(echo -e "${GREEN}Select server (1-${#endpoints[@]}) or Enter for default [1]: ${NC}")" choice
        if [[ $choice =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#endpoints[@]} ]; then
            GEMMA_ENDPOINT="${endpoints[$((choice-1))]}"
        fi
    fi

    echo -e "${GREEN}✓ Using endpoint: $GEMMA_ENDPOINT${NC}"
}

# Setup readline
setup_readline() {
    set -o emacs
    trap 'print_header' WINCH

    # Bind ESC to a custom handler that sets a flag
    bind '"\e": " \C-u__CODY_ESC__\n"'

    if [ -f "$HISTORY_FILE" ]; then
        while IFS= read -r line; do
            history -s "$line"
        done < "$HISTORY_FILE"
    fi

    bind 'set completion-ignore-case on'
    bind 'set show-all-if-ambiguous on'
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
    bind '"\C-a": beginning-of-line'
    bind '"\C-e": end-of-line'
    bind '"\C-k": kill-line'
    bind '"\C-u": unix-line-discard'
    bind '"\C-w": unix-word-rubout'
}

# Enhanced input
read_input_enhanced() {
    local input
    IFS= read -e -r input

    # ESC handler: if input is our special string, treat as cancel
    if [[ "$input" == "__CODY_ESC__" ]]; then
        echo "__CODY_ESC__"
        return 130
    fi

    if [[ -n "$input" && "$input" != " "* ]]; then
        history -s "$input"
        echo "$input" >> "$HISTORY_FILE"

        if [ -f "$HISTORY_FILE" ] && (( $(wc -l < "$HISTORY_FILE") > 1000 )); then
            tail -n 1000 "$HISTORY_FILE" > "$HISTORY_FILE.tmp" && mv "$HISTORY_FILE.tmp" "$HISTORY_FILE"
        fi
    fi

    echo "$input"
}

# Model selection
select_model() {
    fetch_available_models

    if [ ${#AVAILABLE_MODELS[@]} -eq 0 ]; then
        echo -e "${RED}No models available${NC}"
        return 1
    fi

    echo -e "${BLUE}🤖 Available Models:${NC}"
    local i=1
    for model in "${AVAILABLE_MODELS[@]}"; do
        if [ "$model" = "$MODEL_NAME" ]; then
            echo -e "  ${YELLOW}${i}.${NC} ${GREEN}${model} (current)${NC}"
        else
            echo -e "  ${YELLOW}${i}.${NC} ${model}"
        fi
        ((i++))
    done
    echo

    local choice
    read -e -p "$(echo -e "${GREEN}Select model (1-${#AVAILABLE_MODELS[@]}) or Enter for current: ${NC}")" choice

    if [[ $choice =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#AVAILABLE_MODELS[@]} ]; then
        MODEL_NAME="${AVAILABLE_MODELS[$((choice-1))]}"
        echo -e "${GREEN}✓ Switched to: $MODEL_NAME${NC}"
        echo "$MODEL_NAME" > "$HOME/.cody_model"
    fi
}

# Header with proper word wrapping
print_header() {
    clear
    local term_width=$(tput cols 2>/dev/null || echo 80)
    
    local top_border="╭"
    for ((i=1; i<term_width-1; i++)); do
        top_border+="─"
    done
    top_border+="╮"
    
    local bottom_border="╰"
    for ((i=1; i<term_width-1; i++)); do
        bottom_border+="─"
    done
    bottom_border+="╯"
    
    local title="🤖 Self-Modifying Cody"
    local subtitle="AI Development Assistant by Mark Hubrich"
    local title_padding=$(( (term_width - ${#title} - 2) / 2 ))
    local subtitle_padding=$(( (term_width - ${#subtitle} - 2) / 2 ))
    
    echo -e "${CYAN}$top_border${NC}"
    
    printf "${CYAN}│${NC}"
    printf "%*s" $title_padding ""
    printf "${WHITE}%s${NC}" "$title"
    printf "%*s" $((term_width - title_padding - ${#title} - 2)) ""
    printf "${CYAN}│${NC}\n"
    
    printf "${CYAN}│${NC}"
    printf "%*s" $subtitle_padding ""
    printf "${GRAY}%s${NC}" "$subtitle"
    printf "%*s" $((term_width - subtitle_padding - ${#subtitle} - 2)) ""
    printf "${CYAN}│${NC}\n"
    
    echo -e "${CYAN}$bottom_border${NC}"
    echo
    echo -e "${GRAY}Commands:${NC}"
    echo -e "  ${BLUE}/create${NC} <filename> <description>   ${GRAY}Create new file${NC}"
    echo -e "  ${BLUE}/edit${NC} <filename>                  ${GRAY}Edit file${NC}"
    echo -e "  ${BLUE}/run${NC} <filename>                   ${GRAY}Execute file${NC}"
    echo -e "  ${BLUE}/explain${NC} <filename>               ${GRAY}Explain code${NC}"
    echo -e "  ${BLUE}/fix${NC} <filename> <issue>           ${GRAY}Fix code${NC}"
    echo -e "  ${BLUE}/files${NC}                            ${GRAY}List files${NC}"
    echo -e "  ${BLUE}/exec${NC} <command>                   ${GRAY}Execute shell command${NC}"
    echo -e "  ${BLUE}/selfmod${NC} <description>            ${GRAY}Modify myself${NC}"
    echo -e "  ${BLUE}/reload${NC}                           ${GRAY}Reload system prompt${NC}"
    echo -e "  ${BLUE}/model${NC} | ${BLUE}/clear${NC} | ${BLUE}/help${NC} | ${BLUE}/exit${NC}"
    echo
    echo -e "${CYAN}Model:${NC} ${MODEL_NAME}"
    echo -e "${CYAN}Directory:${NC} ${WORK_DIR}"
    
    # System prompt with proper word wrapping
    echo -e "${CYAN}System Prompt:${NC}"
    if [ -n "$SYSTEM_PROMPT" ]; then
        # Extract first 2 lines of system prompt for display
        local prompt_preview=$(echo "$SYSTEM_PROMPT" | head -n 2 | fold -w $((term_width - 4)) -s)
        echo "$prompt_preview" | while IFS= read -r line; do
            echo -e "${GRAY}  $line${NC}"
        done
        
        # Show if there's more content
        local line_count=$(echo "$SYSTEM_PROMPT" | wc -l)
        if [ "$line_count" -gt 2 ]; then
            echo -e "${GRAY}  ... (${line_count} total lines)${NC}"
        fi
    else
        echo -e "${GRAY}  No system prompt loaded${NC}"
    fi
    
    echo
    echo -e "${CYAN}Powers:${NC} ${GRAY}Self-Modification ${GEAR} Command Execution ${LIGHTNING} File Operations${NC}"
    
    local separator=""
    for ((i=0; i<term_width; i++)); do
        separator+="─"
    done
    echo -e "${GRAY}$separator${NC}"
    echo
}

# Typing animation
show_typing() {
    local message="$1"
    echo -e -n "${BLUE}${message}${NC}"
    for i in {1..3}; do
        sleep 0.2
        echo -n "."
    done
    echo
}

# Project context
get_project_context() {
    local context="Project: $WORK_DIR
"
    local file_count=0
    cd "$WORK_DIR" || return
    for file in *; do
        if [ -f "$file" ] && [[ ! "$file" =~ ^cody ]] && [ ${#file} -lt 50 ]; then
            local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            if [ "$lines" -lt 200 ]; then
                context="$context- $file ($lines lines)
"
                ((file_count++))
            fi
        fi
    done
    context="$context
Files: $file_count
"
    echo -e "$context"
}

# AI API call with system prompt
call_gemma() {
    local prompt="$1"
    local custom_system_prompt="${2:-$SYSTEM_PROMPT}"
    local temperature="${3:-0.7}"
    
    local context=$(get_project_context)
    local full_prompt="$context

User: $prompt"
    
    local escaped_prompt=$(echo "$full_prompt" | jq -Rs .)
    local escaped_system=$(echo "$custom_system_prompt" | jq -Rs .)
    
    local messages="[{\"role\": \"system\", \"content\": $escaped_system}, {\"role\": \"user\", \"content\": $escaped_prompt}]"
    
    local response=$(curl -s -X POST "$GEMMA_ENDPOINT/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -d "{
            \"model\": \"$MODEL_NAME\",
            \"messages\": $messages,
            \"temperature\": $temperature,
            \"max_tokens\": 4000
        }" 2>/dev/null)
    
    if [ -n "$response" ]; then
        local error=$(echo "$response" | jq -r '.error.message // empty' 2>/dev/null)
        if [ -n "$error" ]; then
            echo -e "${RED}API Error: $error${NC}" >&2
            return 1
        fi
        
        echo "$response" | jq -r '.choices[0].message.content // empty' 2>/dev/null
    fi
}

# Extract code blocks (extract all code blocks, not just the first)
extract_code() {
    local response="$1"
    if echo "$response" | grep -q '```'; then
        # Extract all code blocks between triple backticks
        echo "$response" | awk '/```/{f=!f; next} f'
    else
        echo "$response"
    fi
}

# Format output
format_output() {
    local text="$1"
    local prefix="${2:-}"
    echo "$text" | fold -w 80 -s | sed "s/^/$prefix/"
}

# Save to memory
save_to_memory() {
    local user_input="$1"
    local response="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] User: $user_input" >> "$MEMORY_FILE"
    echo "[$timestamp] Cody: $response" >> "$MEMORY_FILE"
    echo "---" >> "$MEMORY_FILE"
    
    if [ -f "$MEMORY_FILE" ] && (( $(wc -l < "$MEMORY_FILE") > 400 )); then
        tail -n 400 "$MEMORY_FILE" > "$MEMORY_FILE.tmp" && mv "$MEMORY_FILE.tmp" "$MEMORY_FILE"
    fi
}

# COMMAND EXECUTION ENGINE
execute_command() {
    local command="$1"
    local auto_confirm="${2:-false}"

    echo -e "${BLUE}${LIGHTNING} Executing: ${WHITE}$command${NC}"

    # Safety check (expanded)
    if [[ "$command" =~ (^|[[:space:]])(rm[[:space:]]+-rf|rm[[:space:]]+-fr|sudo|chmod[[:space:]]+777|>[\ \t]*/dev|dd[[:space:]]|mkfs|:(){:|:&};:|shutdown|reboot|poweroff|init[[:space:]]+0|halt|chown[[:space:]]+root|curl[[:space:]]+http|wget[[:space:]]+http|scp[[:space:]]|nc[[:space:]]|netcat[[:space:]]|:(){:|:&};:|kill[[:space:]]+-9[[:space:]]+1)($|[[:space:]]) ]]; then
        echo -e "${RED}⚠️  Dangerous command blocked${NC}"
        return 1
    fi
    
    # Confirm
    if [[ "$auto_confirm" != "true" ]]; then
        echo -e -n "${YELLOW}Execute? (y/N): ${NC}"
        local confirm
        read -r confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo -e "${GRAY}Cancelled${NC}"
            return 1
        fi
    fi
    
    echo -e "${GRAY}────────────────────────────────────────${NC}"
    (cd "$WORK_DIR" && eval "$command")
    local exit_code=$?
    echo -e "${GRAY}────────────────────────────────────────${NC}"
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}✓ Success${NC}"
    else
        echo -e "${RED}✗ Failed (exit code: $exit_code)${NC}"
    fi
    
    return $exit_code
}

# SELF-MODIFICATION ENGINE
modify_self() {
    local description="$1"
    
    echo -e "${BLUE}${GEAR} Self-modification: $description${NC}"
    
    local script_path="$0"
    local backup_path="${script_path}.backup.$(date +%Y%m%d_%H%M%S)"
    
    cp "$script_path" "$backup_path"
    echo -e "${GREEN}✓ Backup: ${backup_path##*/}${NC}"
    
    # Manage backups after creating new one
    manage_backups
    
    show_typing "Analyzing self-modification"
    
    local response=$(call_gemma "I need to modify my own code: $description")
    
    if [ -n "$response" ]; then
        echo -e "${BLUE}${ROBOT} Modification Plan:${NC}"
        echo
        format_output "$response" "  "
        echo
        
        # Check if response contains actual implementation
        if echo "$response" | grep -q "mv\|cp\|mkdir\|chmod\|echo.*>"; then
            echo -e "${GREEN}${TARGET} Implementation detected - executing...${NC}"
            
            # Extract and execute commands from response
            local commands=$(echo "$response" | grep -E "^(mv|cp|mkdir|chmod|echo.*>)" | head -5)
            if [ -n "$commands" ]; then
                echo "$commands" | while read -r cmd; do
                    execute_command "$cmd" "true"
                done
            fi
        fi
        
        local code_block=$(extract_code "$response")
        if [ -n "$code_block" ]; then
            echo -e "${YELLOW}⚠️  Code changes detected. Review and apply manually.${NC}"
            echo -e "${GRAY}Backup: ${backup_path##*/}${NC}"
        fi
        
        save_to_memory "self-modify: $description" "$response"
    else
        echo -e "${RED}✗ Self-modification failed${NC}"
        rm "$backup_path"
    fi
}

# ACTION PARSER
is_action_request() {
    local input="$1"
    
    [[ "$input" =~ ^(rename|move|mv|create|make|delete|remove|copy|cp|chmod|mkdir|run|execute|git|add.*myself|modify.*myself|improve.*myself|apply.*upgrade|implement.*plan) ]]
}

# ACTION EXECUTOR
execute_action() {
    local input="$1"
    local command=""
    
    case "$input" in
        *"rename"*" to "*|*"move"*" to "*)
            local from=$(echo "$input" | sed 's/.*\(rename\|move\) \([^ ]*\) to.*/\2/')
            local to=$(echo "$input" | sed 's/.* to \([^ ]*\).*/\1/')
            command="mv \"$from\" \"$to\""
            ;;
        *"delete"*|*"remove"*)
            local file=$(echo "$input" | sed 's/.*\(delete\|remove\) \([^ ]*\).*/\2/')
            command="rm \"$file\""
            ;;
        *"copy"*" to "*)
            local from=$(echo "$input" | sed 's/.*copy \([^ ]*\) to.*/\1/')
            local to=$(echo "$input" | sed 's/.* to \([^ ]*\).*/\1/')
            command="cp \"$from\" \"$to\""
            ;;
        *"make executable"*|*"chmod"*)
            local file=$(echo "$input" | sed 's/.*\(make executable\|chmod\) \([^ ]*\).*/\2/')
            command="chmod +x \"$file\""
            ;;
        *"mkdir"*|*"create directory"*)
            local dir=$(echo "$input" | sed 's/.*\(mkdir\|create directory\) \([^ ]*\).*/\2/')
            command="mkdir -p \"$dir\""
            ;;
        *"myself"*|*"yourself"*|*"upgrade"*|*"implement"*)
            modify_self "$input"
            return 0
            ;;
        *"git "*)
            command="$input"
            ;;
    esac
    
    if [ -n "$command" ]; then
        execute_command "$command"
    else
        echo -e "${YELLOW}💭 Action unclear: $input${NC}"
        echo -e "${GRAY}Try: 'rename X to Y', 'copy X to Y', 'make X executable'${NC}"
    fi
}

# COMMAND HANDLERS
handle_create() {
    local filename="$1"
    local description="$2"
    
    if [ -z "$filename" ] || [ -z "$description" ]; then
        echo -e "${RED}Usage: /create <filename> <description>${NC}"
        return 1
    fi
    
    local target="$WORK_DIR/$filename"
    
    if [ -f "$target" ]; then
        echo -e -n "${YELLOW}File exists. Overwrite? (y/N): ${NC}"
        local confirm
        read -r confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Cancelled${NC}"
            return 0
        fi
    fi
    
    show_typing "Creating $filename"
    
    local create_prompt="Create $filename: $description. Make it complete and functional."
    local response=$(call_gemma "$create_prompt" "" "0.3")
    
    if [ -n "$response" ]; then
        local code=$(extract_code "$response")
        echo "$code" > "$target"
        
        if [ $? -eq 0 ]; then
            local lines=$(wc -l < "$target")
            echo -e "${GREEN}✓ Created $filename ($lines lines)${NC}"
            save_to_memory "create $filename: $description" "Created $filename"
        else
            echo -e "${RED}✗ Failed to write $filename${NC}"
        fi
    else
        echo -e "${RED}✗ Failed to generate $filename${NC}"
    fi
}

handle_edit() {
    local filename="$1"
    local target="$WORK_DIR/$filename"

    cd "$WORK_DIR" 2>/dev/null || true
    if [ ! -f "$target" ]; then
        echo -e "${RED}✗ File not found: $filename${NC}"
        return 1
    fi

    # Prefer $EDITOR if set
    if [ -n "$EDITOR" ] && command -v "$EDITOR" > /dev/null; then
        "$EDITOR" "$target"
    elif command -v code > /dev/null; then
        code "$target"
    elif command -v nano > /dev/null; then
        nano "$target"
    elif command -v vim > /dev/null; then
        vim "$target"
    else
        echo -e "${RED}No editor found${NC}"
        return 1
    fi

    echo -e "${GREEN}✓ Edited $filename${NC}"
}

handle_run() {
    local filename="$1"
    local target="$WORK_DIR/$filename"
    
    cd "$WORK_DIR" 2>/dev/null || true
    if [ ! -f "$target" ]; then
        echo -e "${RED}✗ File not found: $filename${NC}"
        return 1
    fi
    
    echo -e "${BLUE}${ROCKET_ICON} Running $filename...${NC}"
    echo -e "${GRAY}────────────────────────────────────────${NC}"
    
    case "$filename" in
        *.py) python3 "$target" || python "$target" ;;
        *.js) node "$target" ;;
        *.sh) bash "$target" ;;
        *.rb) ruby "$target" ;;
        *.go) go run "$target" ;;
        *) echo -e "${YELLOW}Unknown file type: $filename${NC}" ;;
    esac
    
    echo -e "${GRAY}────────────────────────────────────────${NC}"
    echo -e "${GREEN}✓ Finished${NC}"
}

handle_explain() {
    local filename="$1"
    local target="$WORK_DIR/$filename"
    
    cd "$WORK_DIR" 2>/dev/null || true
    if [ ! -f "$target" ]; then
        echo -e "${RED}✗ File not found: $filename${NC}"
        return 1
    fi
    
    show_typing "Analyzing $filename"
    
    local code=$(cat "$target")
    local explain_prompt="Explain this code clearly and concisely:

$code"
    local response=$(call_gemma "$explain_prompt" "" "0.5")
    
    if [ -n "$response" ]; then
        echo -e "${GREEN}✓ Explanation for $filename:${NC}"
        echo
        format_output "$response" "  "
        echo
        save_to_memory "explain $filename" "$response"
    else
        echo -e "${RED}✗ Failed to explain $filename${NC}"
    fi
}

handle_fix() {
    local filename="$1"
    shift
    local issue="$*"
    local target="$WORK_DIR/$filename"
    
    cd "$WORK_DIR" 2>/dev/null || true
    if [ ! -f "$target" ]; then
        echo -e "${RED}✗ File not found: $filename${NC}"
        return 1
    fi
    
    show_typing "Fixing $filename"
    
    local code=$(cat "$target")
    local fix_prompt="Fix this code to resolve: $issue

Code:
$code

Return only the complete fixed code."
    local response=$(call_gemma "$fix_prompt" "" "0.3")
    
    if [ -n "$response" ]; then
        local fixed_code=$(extract_code "$response")
        local backup_file="$target.backup.$(date +%Y%m%d_%H%M%S)"
        
        cp "$target" "$backup_file"
        echo "$fixed_code" > "$target"
        
        echo -e "${GREEN}✓ Fixed $filename${NC}"
        echo -e "${GRAY}Backup: ${backup_file##*/}${NC}"
        save_to_memory "fix $filename: $issue" "Fixed $filename"
    else
        echo -e "${RED}✗ Failed to fix $filename${NC}"
    fi
}

handle_files() {
    local show_dotfiles=1
    local only_sources=0
    # Parse options: --no-dotfiles, --sources
    for arg in "$@"; do
        case "$arg" in
            --no-dotfiles) show_dotfiles=0 ;;
            --sources) only_sources=1 ;;
        esac
    done

    echo -e "${BLUE}📄 Files in: ${WORK_DIR}${NC}"
    echo
    local file_count=0 total_lines=0
    cd "$WORK_DIR" || return
    for file in * .*; do
        # Optionally skip dotfiles
        if [ $show_dotfiles -eq 0 ] && [[ "$file" == .* ]]; then
            continue
        fi
        # Optionally show only source files
        if [ $only_sources -eq 1 ] && [[ ! "$file" =~ \.(py|js|sh|rb|go|ts|c|cpp|java|rs|pl|php|lua|swift|scala|kt|cs|hs|jl|m|r|sql|json|yaml|yml|toml|ini|cfg|xml|html|css|md|txt)$ ]]; then
            continue
        fi
        if [ -f "$file" ] && [ "$file" != "." ] && [ "$file" != ".." ]; then
            local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            local size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            local size_str=""; [ "$size" -gt 1048576 ] && size_str="$(( size / 1048576 ))MB" || { [ "$size" -gt 1024 ] && size_str="$(( size / 1024 ))KB" || size_str="${size}B"; }
            case "$file" in
                *.py) echo -e "  🐍 ${GREEN}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                *.js) echo -e "  📜 ${YELLOW}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                *.txt) echo -e "  📄 ${WHITE}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                *.md) echo -e "  📝 ${BLUE}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                *.sh) echo -e "  ⚡ ${GREEN}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                .*) echo -e "  🔒 ${GRAY}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
                *) echo -e "  📄 ${WHITE}${file}${NC} ${GRAY}(${lines} lines, ${size_str})${NC}" ;;
            esac
            ((file_count++)); ((total_lines += lines))
        fi
    done
    echo; echo -e "${GRAY}📊 Total: ${file_count} files, ${total_lines} lines${NC}"
    if [ $show_dotfiles -eq 1 ]; then
        echo -e "${GRAY}Tip: Use '/files --no-dotfiles' to hide dotfiles.${NC}"
    fi
    if [ $only_sources -eq 0 ]; then
        echo -e "${GRAY}Tip: Use '/files --sources' to show only source/code files.${NC}"
    fi
}

handle_chat() {
    local input="$1"
    
    if is_action_request "$input"; then
        echo -e "${BLUE}${TARGET} Action: $input${NC}"
        execute_action "$input"
    else
        show_typing "Thinking"
        
        local response=$(call_gemma "$input")
        
        if [ -n "$response" ]; then
            echo -e "${BLUE}${ROBOT} Cody:${NC}"
            echo
            format_output "$response" "  "
            echo
            save_to_memory "$input" "$response"
        else
            echo -e "${RED}✗ No response${NC}"
        fi
    fi
}

# MAIN INPUT PARSER
parse_input() {
    local input="$1"

    if [ -z "$input" ]; then
        return 0
    fi

    if [[ "$input" =~ ^/[a-zA-Z] ]]; then
        local command=$(echo "$input" | sed 's/^\/\([a-zA-Z]*\).*/\1/')
        local args=$(echo "$input" | sed 's/^\/[a-zA-Z]* *//')

        case "$command" in
            "create")
                local filename=$(echo "$args" | awk '{print $1}')
                local description=$(echo "$args" | cut -d' ' -f2-)
                handle_create "$filename" "$description"
                ;;
            "edit") handle_edit "$args" ;;
            "run") handle_run "$args" ;;
            "explain") handle_explain "$args" ;;
            "fix")
                local filename=$(echo "$args" | awk '{print $1}')
                local issue=$(echo "$args" | cut -d' ' -f2-)
                handle_fix "$filename" "$issue"
                ;;
            "files")
                # Allow /files --no-dotfiles and /files --sources
                handle_files $args
                ;;
            "exec") execute_command "$args" ;;
            "selfmod") modify_self "$args" ;;
            "model") select_model ;;
            "reload")
                load_system_prompt
                echo -e "${GREEN}✓ System prompt reloaded${NC}"
                ;;
            "clear")
                > "$MEMORY_FILE"
                echo -e "${YELLOW}✓ Cleared${NC}"
                ;;
            "help") print_header ;;
            "exit"|"quit")
                echo -e "${YELLOW}${ROCKET_ICON} Goodbye!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Unknown: /$command${NC}"
                ;;
        esac
    else
        handle_chat "$input"
    fi
}

# MAIN LOOP
main() {
    trap 'echo -e "\n${YELLOW}Goodbye!${NC}"; exit 0' INT
    trap 'print_header' WINCH

    # Check if we're running non-interactively (piped input)
    if [ ! -t 0 ]; then
        # Non-interactive mode: read from stdin and process each line
        while IFS= read -r input; do
            parse_input "$input"
        done
        exit 0
    fi

    setup_readline
    print_header

    while true; do
        printf "${GREEN}❯${NC} "  # More distinct prompt with a space
        input=$(read_input_enhanced)

        # ESC pressed: cancel and return to prompt
        if [[ "$input" == "__CODY_ESC__" ]] || [ $? -eq 130 ]; then
            echo -e "${YELLOW}↩️  Cancelled. Back to prompt.${NC}"
            echo -e "${GRAY}────────────────────────────────────────${NC}"  # Divider after cancel
            continue
        fi

        if [ $? -ne 0 ]; then
            echo -e "\n${YELLOW}Goodbye!${NC}"
            break
        fi

        parse_input "$input"
        echo -e "${GRAY}────────────────────────────────────────${NC}"  # Divider after each command
        echo  # Blank line for readability
    done
}

# STARTUP
# Check if we're running non-interactively (piped input)
if [ ! -t 0 ]; then
    # Non-interactive mode: minimal startup
    if ! command -v curl > /dev/null || ! command -v jq > /dev/null; then
        echo -e "${RED}Missing: curl and/or jq${NC}"
        exit 1
    fi
    
    load_model_preference
    load_system_prompt
    select_endpoint
    
    # Quick connection test
    if ! curl -s "$GEMMA_ENDPOINT/v1/models" > /dev/null; then
        echo -e "${RED}✗ Cannot connect to $GEMMA_ENDPOINT${NC}"
        exit 1
    fi
    
    main
else
    # Interactive mode: full startup
    echo -e "${CYAN}🚀 Self-Modifying Cody${NC}"
    echo -e "${GRAY}Initializing...${NC}"

    # Check dependencies
    if ! command -v curl > /dev/null || ! command -v jq > /dev/null; then
        echo -e "${RED}Missing: curl and/or jq${NC}"
        exit 1
    fi

    # Load configuration
    load_model_preference
    load_system_prompt
    select_endpoint

    echo -e "${BLUE}Testing connection...${NC}"
    if ! curl -s "$GEMMA_ENDPOINT/v1/models" > /dev/null; then
        echo -e "${RED}✗ Cannot connect to $GEMMA_ENDPOINT${NC}"
        exit 1
    fi

    echo -e "${GREEN}✓ Connected${NC}"
    select_model

    sleep 1
    main
fi
